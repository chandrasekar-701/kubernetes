see the orginal of below content at https://github.com/kloudvsol/K8s_class/blob/main/kubeadm_init
 Prepare Hostname, Firewall and SELinux
 
# hostnamectl set-hostname master-node
# cat <<EOF>> /etc/hosts
10.128.0.27 master-node
10.128.0.29 node-1 worker-node-1
10.128.0.30 node-2 worker-node-2
EOF
-----------------
 #disable SElinux and update your firewall rules.
# we need to disable SElinux(security-enhanced linux) during kubeadm init because SELinux enforces strict access controls that can interfere with Kubernetes' containerized workloads and networking
 
  setenforce 0
  sed -i --follow-symlinks 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux
 reboot
                    or simply go to vi /etc/sysconfig/selinux --------and disable the permissions
 # Disable Firewalld
 
systemctl stop firewalld
systemctl disable firewalld
 
# Install the most recent Docker Engine package. --------------here container runtaime (docker) is added, you can also opt for containerd,CRI-o,docker..etc
# components like kubelet communicate with  the container runtime(here docker) to manage container lifecycle operations (start, stop, delete containers).
 sudo yum update -y
 sudo amazon-linux-extras install docker -y
 systemctl enable docker
 systemctl daemon-reload && systemctl restart docker 
 sudo usermod -a -G docker ec2-user
 docker info
 
 
 swapoff -a
echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables
modprobe br_netfilter
modprobe nf_nat
modprobe xt_REDIRECT
modprobe xt_owner
modprobe iptable_nat
modprobe iptable_mangle
modprobe iptable_filter


 
# Setup the Kubernetes Repo
# You will need to add Kubernetes repositories manually as they do not come installed by default on CentOS 7.
# Why to Use This following commands?
This setup is required when preparing a Linux machine for Kubernetes installation. The repository provides the latest official Kubernetes packages directly from Google's repositories

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

If the Above is not working : 
--------------------------------------------------------------------------------------------
mv /etc/yum.repos.d/kubernetes.repo /etc/yum.repos.d/kubernetes.repo.bak
cat >> /etc/yum.repos.d/kubernetes.repo <<EOF
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=0
EOF

----------------------------------------------------------------------------------------------


yum install -y kubelet-1.21.2
yum install -y kubectl-1.21.2
yum install -y kubeadm-1.21.2 


systemctl daemon-reload 
systemctl restart kubelet
 
systemctl  status kubelet

systemctl enable  kubelet

# Now we are ready to initialize kubernetes master, but before that you need to disable swap in order to run “kubeadm init“ command.

 swapoff -a


 kubeadm init --control-plane-endpoint "192.168.0.0:6443" --upload-certs --pod-network-cidr=10.244.0.0/16

after executing the above command, copy the command in that output and run it on any number of worker node you desired to join in that cluster

# Kubeadm: A lightweight tool for bootstrapping Kubernetes clusters. It sets up the control plane and worker nodes but relies on pre-provisioned infrastructure.

# instead of kubeadm you can also use other tools for setting up a kubernet clustes are kops,minicube,rancher .......... etc
 
 
below three command only in masternode,------ but sir said to run on both nodes
 mkdir -p $HOME/.kube       #This directory is used to store the Kubernetes configuration file (config) that allows kubectl to interact with the cluster.
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

##the above command used for.  After initializing the cluster with kubeadm, you need to configure your local kubectl CLI to connect and manage the cluster. 
These commands set up the kubectl configuration in the user's home directory, ensuring seamless interaction with the cluster.



Flanel 
kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml

What Happens After Running This Command?
Flannel's components (e.g., daemonset, configmap) are deployed to your Kubernetes cluster.
All nodes in your cluster will establish pod networking using Flannel.
Once successfully applied, pods across nodes can communicate with each other seamlessly.
